Make a Music Player with tkinter! - #tkinter30 0/30
This is a very detailed, in-depth project developed using Python tkinter.
In this GUI application, we can add music files to the playlist,
we will be able to Play these files,
we will be able to Mute these files,
we can also control the volume of the music,
we will also be able to Pause, Rewind and Delete items from the playlist. 
We will also have a status bar which shows the current status of the playlist and view which song is being played. 
We are going to make a Cool project using tkinter by applying themes, styles. 
We will be using Pygame library mixer along with tkinter to make this application.

Creating a Tkinter window + Python GUI Programming - #tkinter30 1/30
We use tkinter. Tkinter is a Python binding to the Tk GUI toolkit. It is the standard Python interface to the Tk GUI toolkit, and is Python's de facto standard GUI.
We don't need to pip install tkinter or install anything externally, it is included with python.
from tkinter import * ->Install everything from Tkinter.
root = Tk() ->This creates a window and stores inside the root variable.
root.mainloop() ->Any video is a lot of frames or pictures played together. Similarly, whenever we create a window, this is created just for milli seconds and disappears.
This is just not sufficient to be detected using our naked eye. So we are engaging that window in an infinite loop.

Python GUI with Tkinter - Title, Icon and the Geometry - 2/30
root.title("Mellody") -> Changes the title of the window to Mellody.
To add the icon to the window, tkinter only accepts the pictures with .ico extension.
Downloaded the image in .png format and converted it into .ico format.
I created a folder images in the Mellody folder and placed the icon image music.ico there.
root.iconbitmap(r'images/music.ico') -> creates the icon to the root window.
To change the dimensions of the window, just use root.geometry('width x height')

Python GUI with Tkinter - Text and Images - 3/30
Everything inside the tkinter window contains a lot of widgets. Any text, picture or buttons that goes inside the tkinter window is a widget.
text = Label(root, text = 'Lets make some noise')
After creating a widget in the tkinter window, we have to do something called as packing.
text.pack()
Label widget also acts like a container for embedding images in the tkinter window.
photo = PhotoImage(file = 'images/play.png')
labelphoto = Label(root,photo)
But the Label by default treates the photo as text. So we need to specify that it is an image.
labelphoto = Label(root, image=photo)
labelphoto.pack()

Python GUI with Tkinter - Adding an Image Button for playing Music - 4/30
We have a play image in the tkinter window. Now we need to change this image into a button.
btn = Button(root, image=photo, command=play_btn) #command = play_btn but not play_btn().
btn.pack()
command=play_btn is a function that gets called when the button is pressed.
So let's write the function.
def play_btn():
    print("This works")
Now we can remove the image form the window.
When we press on the lay button, "This works" is being displayed in the terminal.

Python GUI with Tkinter - Playing music using Pygame - 5/30
We have seen that our play button works perfectly well.
Lets add some music so that whenever the play button is preesed the music is played.
We are going to use mixer in pygame. Mixer is a module in pygame which is responsible for the audio and sound effects.
In the Pycharm, go to File->Settings->Mellody->Project Intrepretor->Click + icon->Install pygame package.
from pygame import mixer
mixer.init() #initializing the mixer.
Change the name of the variable photo to playPhoto and btn to playBtn.
Modify the function play_btn() to play the music.
def play_music():
    mixer.music.load("Music_files/prabhas_rebel_theme.mp3")
    mixer.music.play()

Python GUI with Tkinter - Stopping the music using Pygame - 6/30
Just like we created the play button and the play_music() function, we should create the stop button and a function stops the music when button is clicked.
def stop_music():
    mixer.music.stop()
stopPhoto = PhotoImage(file = 'images/stop.png')
stopBtn = Button(root, image=stopPhoto, command=stop_music)
stopBtn.pack()

Python GUI with Tkinter - Volume control using Scale Widget - 7/30
The Volume control widget is called the Scale widget in tkinter.
def set_vol(val):
    volume = int(val)/100
    mixer.music.set_volume(volume)
    # set_volume takes values only from 0 to 1. Ex: 0,0.18,0.54,0.99,1
scale = Scale(root, from_=0, to=1, orient =HORIZONTAL, command =set_vol)# set_vol sends the volume value as a string to the function.
scale.set(70) #Setting initial volume to 70
scale.pack()
We have taken a Scale widget, volume range starting from 0 to 100 in horizontal orientation. But tis widget does'nt fulfill its purpose of adjusting volume now.
So lets call a function set_vol. When the function is called, the function sends the volume to the function as a string.
So lets change the data type to int. And since set_volume takes values only from 0 to 1. Ex: 0,0.18,0.54,0.99,1, lets divide it by 100.

Python GUI with Tkinter - Adding a Menubar - 8/30
We have just set the default value of volume to 70 but when executed, it only plays the default volume.
mixer.music.set_volume(70) To actually set the volume to 70.
In the Menubar at the top of the window, there are Sub-Menu's and when clicked on the Sub-Menu, the Drop-Down Menu/ Cascade appears.
# Create the menubar
menubar = Menu(root)
root.config(menu=menubar)
# Create the submenu
subMenu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="File", menu=subMenu)
subMenu.add_command(label="Open")
subMenu.add_command(label="Exit")

subMenu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="Help", menu=subMenu)
subMenu.add_command(label="About Us")

Python GUI with Tkinter - Messagebox + Executing commands in Menubar - 9/30
This video is to implement 2 functionalities.
In the menubar, File->Exit, Help->About us
import tkinter.messagebox # When we click on About Us, The message box should appear. So we import it from tkinter
def about_us():
    tkinter.messagebox.showinfo('About Melody', 'This is a music player build using Python Tkinter by @sripad_v')
And add a function to subMenu.add_command(label="Exit", command=root.destroy)
And add a function to subMenu.add_command(label="About Us", command=about_us)

Python GUI with Tkinter - Opening up files using Filedialog Tkinter - 10/30
from tkinter import filedialog
def browse_file():
    global filename
    filename = filedialog.askopenfilename()
subMenu.add_command(label="Open", command=browse_file)
def play_music():
    try:
        mixer.music.load(filename)
        mixer.music.play()
    except:
        tkinter.messagebox.showerror('File not found', 'Melody could not find the file. Please check again.')
        print("Error")

Python GUI with Tkinter - Adding a Statusbar - 11/30
statusbar = Label(root, text="Welcome to Melody", relief=SUNKEN, anchor=W)
statusbar.pack(side=BOTTOM, fill=X)
We want to add the status bar at the bottom of the window.
Just adding text displays the text below the stop button.
So we give it a box style by using relief=SUNKEN, to take it to the bottom, side=BOTTOM, fill=X in the pack parameter.
anchor=W (West)anchors the text in status bar to the left(West).
statusbar['text'] = "Playing music" + ' - ' + os.path.basename('journey.wav')
In the status bar, we get the status of the song being played.

Python GUI with Tkinter - Pause and Unpause the music using Tkinter and Pygame - 12/30
def pause_music():
    global paused
    paused = TRUE
    mixer.music.pause()
    statusbar['text'] = "Music Paused"
def play_music():
    try:
        paused  # Checks whether the 'paused' variable is initialized or not.

    except NameError:  # If not initialized then executes the code under except condition
        try:
            mixer.music.load('journey.wav')
            mixer.music.play()
            statusbar['text'] = "Playing music" + ' - ' + os.path.basename('journey.wav')
        except:
            tkinter.messagebox.showerror('File not found', 'Melody could not find the file. Please check again.')

    else:  # If initialized the it goes to the else condition
        mixer.music.unpause()
        statusbar['text'] = "Music Resumed"

Python GUI in Tkinter - Pack layout Manager and Frames - 13/30
We use layout Managers to pack widgets inside the tkinter window.
Made buttons horizontal.
removed root.geometry()
Added padding to buttons.
Learnt about frames and how they separate the tkinter window into separate halves.
Created divisions. Top, Middle and Bottom.
Learnt about the 2 types of layout Managers: Pack layout Manager and Grid layout Manager.

Python GUI with Tkinter - Grid Layout Manager and Frames - 14/30
For now as our GUI is simple, Pack is enough.
For complex applications Grid should be used.
You cant use the Grid and Pack in the same python files unless they are in the frames.

Python GUI with Tkinter - Toggle the Tkinter button + Mute the music with Pygame - 16/30
Created 2 images for button so that when former is clicked, it changes to latter.
Implemented the mute functionality. When pressed on the mute button, the button gets changed to volume and the volume scale goes to 0.
When unmuted, the volume goes back to previous set.

Python GUI with Tkinter - Fixing the Logic of the pause unpause in Pygame - 17/30
Maintenance Work to be done.
Put all the images in the Melody folder into the images folder.
Change the logic of Pause.

Python GUI with Tkinter - Calculating length/duration of the WAV sound files - 18/30
Display the total length of the song in the window.
And also display the filename instead of "Lets make some noise."
For displaying the length of the music, it is easy to display the length for ".wav" files using mixer library.
But the mp3 files are so big that it is not supported by mixer, so we have to use the mutagen package.
We just used round() and formatting to display the length of the music file.

Calculating length/duration of the MP3 files using Mutagen - 19/30
The mp3 music files are big and the pygame mixer just does'nt have the functionality to handle the mp3 files.
It is just the last 4 letters difference between .mp3 and .wav the extensions.
So we just use if else statements to run these different files.
Installed packages: 'mutagen'
When clicked on the music file properties, we can see the length of the music file.
This is called metadata.
SO by using mutagen , we have to extract the metadata.

20/30 Threading done.

Python GUI with Tkinter - Events and Bindings - Overriding the close button Tkinter - 21/30
In the start_count() function, we have used the variable x. Change that to current_time.
When we play the music and then press the close button, the error shows that "RuntimeError: main thread is not in main loop".
At the end of the program, write:
root.protocol("WM_WINDOW_DELETE",on_closing)
and create a function on_closing().

Python GUI with Tkinter - Listbox widget + Advance Frames - 22/30
We use listbox to add playlist that displays songs.
So in the window, there are left frames and right frames.
In the left frame, there is the playlist.
In the right frame, there are again top frame(having Length of music file), middle frame(having buttons), And the bottom frame for volume controls.

Python GUI with Tkinter - Adding items to Listbox- 23/30
The same way when we click File->Open, a dialog box opens to select the songs. We do the same to add the songs to the playlist.
Adding the files: browse_file(), add_to_playlist()
f = os.path.basename(f) adds only the filename instead of the whole path.

Python GUI with Tkinter - Playing Songs on the Playlist with Pygame - 24/30
In Browse_file(), refactor the variable filename to filename_path and f regactor to filename.
Create a newlist ; playlist = []

Python GUI with Tkinter - Fixing the Statusbar + Current time + Total Length - 25/30
Changing the current length of file.
Line 145, filename_path -> play_it

Python GUI with Tkinter - Deleting items from the Listbox - 26/30
Adding a function del_btn().

Python GUI with Tkinter - Adding Stylish themes to our Tkinter App - 28/30
Install the package "ttkthemes".
from tkinter import ttk
from ttkthemes import themed_tk as tk

Converting python to executables using cx_freeze - 29/30
Or another alternative to cx_freeze is py2exe.
Install cx_Freeze package.
Create a new file "setup.py".
